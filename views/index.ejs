<!DOCTYPE html>
<html>
    <head>
        <title><%= data.title %></title>
    </head>
    <body>
        <h3>index(chat) sayfasındasın.</h3>
        <span>kullanıcı adınız : <%= data.user %> bulunduğunuz oda : <%= data.room %></span>
        <input type="text" id="messageInput" placeholder="mesajınızı girin..." autocomplete="off">
        <button type="button" id="mesajGonderButonu">Gönder</button>
        <ul id="mesajListesi"></ul>
        <h3>KATILIMCILAR :</h3>
        <div id="katilimciListesi"></div>
    </body>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        let socket = io();
        let kullaniciAdi = "<%= data.user %>";
        let room = "<%= data.room %>";
        let mesajGonderButonu = document.getElementById("mesajGonderButonu");
        let mesajListesi = document.getElementById("mesajListesi");
        let katilimciListesi = document.getElementById("katilimciListesi");
        
        //kullanıcı bağlandığında oda bilgisini de server'a yollasın. bu şekilde odaya özel mesajlaşmayı ayarlarız?
        socket.emit('odayaKatil', room); //-> bu eventi server'da dinleyip join yap.
        
        //kullanıcı bağlandığında server'a kimliği yolla.
        socket.emit("yeniKatilimciBaglandi", {kullaniciAdi : kullaniciAdi, oda: room});

        mesajGonderButonu.addEventListener('click', () => {
            const now = new Date();
            let messageData = {
                message: document.getElementById("messageInput").value,
                sender: "<%= data.user %>",
                date: now.getHours() + ":" + now.getMinutes(),
                room: room
            }
            socket.emit('sendMessage', messageData); //sendMessage adlı bir olay oluşturup mesajla birlikte server'a at.
            document.getElementById("messageInput").value = ""; //mesaj gönderdikten sonra input alanı temizlensin.
        });

        //sunucuda receiveMessage adlı bir olay tetiklenirse bu kod parçası çalışacak :
        socket.on('receiveMessage', (messageData) => {
            mesajListesi.innerHTML = ""; // Önceki mesajları temizle
            messageData.forEach((messageData) => {
                const li = document.createElement('li');
                li.textContent = messageData.sender + ":" + messageData.message + "tarih : " + messageData.date + "hangi odanın mesajı : " + messageData.room;
                mesajListesi.append(li);
            });
        });

        socket.on('katilimciListele', (_katilimcilar) => {
            katilimciListesi.innerHTML = '';
            for (let i = 0; i < _katilimcilar.length; i++) {
                const katilimci = _katilimcilar[i];
                console.log(katilimci);
                const katilimciElement = document.createElement('div');
                katilimciElement.textContent = katilimci.kullaniciAdi;
                katilimciListesi.appendChild(katilimciElement);
            }
        });

        socket.on('mesajlariYukle', (messages) => {
            // Mesajları görüntülemek için messageList'i güncelle
            mesajListesi.innerHTML = ""; // Önceki mesajları temizle
            messages.forEach((messageData) => {
                const li = document.createElement('li');
                li.textContent = messageData.sender + ":" + messageData.message + "tarih : " + messageData.date + "hangi odanın mesajı : " + messageData.room;
                mesajListesi.append(li);
            });
        });
    </script>
</html>