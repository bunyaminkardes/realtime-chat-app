<!DOCTYPE html>
<html>
    <head>
        <!--<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" />-->
        <meta charset="utf-8">
        <title><%= data.title %></title>
        <link rel="stylesheet" href="custom.css">
        <link rel="stylesheet" href="bootstrap.4.0.0.min.css">
    </head>
    <body>
        <div class="container" style="padding-top:25px;"> <!-- inline css -->
            <div class="row">
                <div class="col-12 col-sm-12 col-md-12 col-lg-3" style="background-color: #261066;"> <!-- inline css -->
                    <h3 id="katilimcilarBaslik">KATILIMCILAR</h3>
                    <div id="katilimciListesi"></div>
                </div>
                <div class="col-12 col-sm-12 col-md-12 col-lg-9" id="scroll" style="background-color: #0a0a33;"> <!-- inline css -->
                    <ul id="mesajListesi"></ul>                   
                </div>
            </div>
        </div>
        <div class="container">
            <div class="row">
                <div class="col-3 col-sm-3 col-md-3 col-lg-3" style="background-color: #5a32cf;"> <!-- inline css -->
                    <span id="katilimciKullaniciAdi">siz : <%= data.user %></span>
                    <span>oda : <%= data.room %> </span>
                </div>
                <div class="col-9 col-sm-9 col-md-9 col-lg-9 icerigi-yatay-dikey-ortala" style="background-color: #2e1773;"> <!-- inline css -->
                    <input type="text" id="messageInput" placeholder="mesajınızı girin..." autocomplete="off">
                    <button type="button" id="mesajGonderButonu">Gönder</button>
                </div>
            </div>
        </div>
    </body>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        let socket = io();
        let kullaniciAdi = "<%= data.user %>";
        let room = "<%= data.room %>";
        let mesajInputu = document.getElementById("messageInput");
        let mesajGonderButonu = document.getElementById("mesajGonderButonu");
        let mesajListesi = document.getElementById("mesajListesi");
        let katilimciListesi = document.getElementById("katilimciListesi");
        let scrollBar = document.getElementById("mesajListesi");

        //kullanıcı bağlandığında oda bilgisini de server'a yollasın.
        socket.emit('odayaKatil', room);
        
        //kullanıcı bağlandığında server'a kimliği yolla.
        socket.emit("yeniKatilimciBaglandi", {kullaniciAdi : kullaniciAdi, oda: room});

        const mesajGonder = () => {
            const now = new Date();
            let messageData = {
                message: document.getElementById("messageInput").value,
                sender: "<%= data.user %>",
                date: now.getHours() + ":" + now.getMinutes() + ":" + now.getSeconds(),
                room: room
            }
            if(messageData.message !== "") { //boş mesaj atılmasını engelle.
                socket.emit('sendMessage', messageData); //sendMessage adlı bir olay oluşturup mesajla birlikte server'a at.
            }
            document.getElementById("messageInput").value = ""; //mesaj gönderdikten sonra input alanı temizlensin.
        };

        mesajInputu.addEventListener('keyup', function(event) {
            if(event.keyCode === 13) {
                event.preventDefault();
                mesajGonder();
            }
        });

        mesajGonderButonu.addEventListener('click', () => {
            mesajGonder();
        });

        //sunucuda receiveMessage adlı bir olay tetiklenirse bu kod parçası çalışacak :
        socket.on('receiveMessage', (messageData) => {
            mesajListesi.innerHTML = ""; // Önceki mesajları temizle
            messageData.forEach((messageData) => {
                const li = document.createElement('li');
                li.textContent = "[" + messageData.date + "]" + " - " + messageData.sender + " :\n" + messageData.message;
                mesajListesi.append(li);
            });
            scrollBar.scrollTop = scrollBar.scrollHeight; //mesaj geldikçe mesaj kutusunun en aşağısına scrolla.
        });

        socket.on('katilimciListele', (_katilimcilar) => {
            katilimciListesi.innerHTML = '';
            for (let i = 0; i < _katilimcilar.length; i++) {
                const katilimci = _katilimcilar[i];
                const katilimciElement = document.createElement('div');
                katilimciElement.textContent = katilimci.kullaniciAdi;
                katilimciListesi.appendChild(katilimciElement);
            }
        });

        socket.on('mesajlariYukle', (messages) => {
            // Mesajları görüntülemek için messageList'i güncelle
            mesajListesi.innerHTML = ""; // Önceki mesajları temizle
            messages.forEach((messageData) => {
                const li = document.createElement('li');
                li.textContent = "[" + messageData.date + "]" + " - " + messageData.sender + " :\n" + messageData.message;
                mesajListesi.append(li);
            });
            scrollBar.scrollTop = scrollBar.scrollHeight; //sayfa yenilendiğinde mesaj kutusunun en aşağısına scrolla.
        });
    </script>
</html>